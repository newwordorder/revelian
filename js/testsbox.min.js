"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var testsBox =
/*#__PURE__*/
function () {
  function testsBox(data) {
    _classCallCheck(this, testsBox);

    this.initialData = Object.values(data.tests);
    this.data = Object.values(data.tests);
    this.activePage = 0;
    this.pagination = [];
    this.mapped = this.prepareData(this.data);
    this.pageSetup(this.mapped);
    this.selectorSetup();
    this.searchSetup();
  }

  _createClass(testsBox, [{
    key: "pageSetup",
    value: function pageSetup(data) {
      this.isMultiPage(data) ? this.singlePageSetup(data) : this.multiPageSetup(this.chunkArray(data, 20));
    }
  }, {
    key: "singlePageSetup",
    value: function singlePageSetup(data) {
      data.forEach(function (b) {
        return testsbox.insertAdjacentHTML("beforeend", b);
      });
    }
  }, {
    key: "multiPageSetup",
    value: function multiPageSetup(data) {
      this.paginationSetup(data);
      this.addToTestBox(this.prepareArrayForPrinting(data[this.activePage]));
    }
  }, {
    key: "paginationSetup",
    value: function paginationSetup(data) {
      var _this = this;

      this.resetPagination();
      var nextPage = this.getActivePage() + 1;
      var previousPage = this.getActivePage() - 1;

      var buttons = function buttons() {
        if (_this.getNumberOfPages() != 1) {
          if (_this.getActivePage() === 0) {
            return "<li class=\"page-item\"><a class=\"page-link\">Page ".concat(_this.getActivePage() + 1, " of ").concat(_this.getNumberOfPages() + 1, "</a></li><li id=\"pageNo--").concat(nextPage, "\" class=\"page-item\"><a class=\"page-link\">Next</a></li>");
          } else if (_this.getActivePage() === _this.chunkArray(_this.mapped, 20).length - 1) {
            return "<li id=\"pageNo--".concat(previousPage, "\" class=\"page-item\"><a class=\"page-link\">Previous</a></li><li class=\"page-item\"><a class=\"page-link\">Page ").concat(_this.getActivePage() + 1, " of ").concat(_this.getNumberOfPages() + 1, "</a></li>");
          } else {
            return "<li id=\"pageNo--".concat(previousPage, "\" class=\"page-item\"><a class=\"page-link\">Previous</a></li><li class=\"page-item\"><a class=\"page-link\">Page ").concat(_this.getActivePage() + 1, " of ").concat(_this.getNumberOfPages() + 1, "</a></li><li id=\"pageNo--").concat(nextPage, "\" class=\"page-item\"><a class=\"page-link\">Next</a></li>");
          }
        } else {
          return "";
        }
      };

      this.pagination.push(buttons());
      this.addContent({
        id: pageList,
        array: this.pagination
      });
      Array.from(pageList.children).map(function (a) {
        return a.addEventListener("click", function () {
          _this.navigateTo(a.id.split("--")[1]);
        });
      });
    }
  }, {
    key: "paginationUpdate",
    value: function paginationUpdate(data) {
      var _this2 = this;

      this.resetPagination();
      var nextPage = this.getActivePage() + 1;
      var previousPage = this.getActivePage() - 1;

      var buttons = function buttons() {
        if (_this2.getNumberOfPages() != 1) {
          if (_this2.getActivePage() === 0) {
            return "<li class=\"page-item\"><a class=\"page-link\">Page ".concat(_this2.getActivePage() + 1, " of ").concat(_this2.getNumberOfPages() + 1, "</a></li><li id=\"pageNo--").concat(nextPage, "\" class=\"page-item\"><a class=\"page-link\">Next</a></li>");
          } else if (_this2.getActivePage() === _this2.chunkArray(_this2.mapped, 20).length - 1) {
            return "<li id=\"pageNo--".concat(previousPage, "\" class=\"page-item\"><a class=\"page-link\">Previous</a></li><li class=\"page-item\"><a class=\"page-link\">Page ").concat(_this2.getActivePage() + 1, " of ").concat(_this2.getNumberOfPages() + 1, "</a></li>");
          } else {
            return "<li id=\"pageNo--".concat(previousPage, "\" class=\"page-item\"><a class=\"page-link\">Previous</a></li><li class=\"page-item\"><a class=\"page-link\">Page ").concat(_this2.getActivePage() + 1, " of ").concat(_this2.getNumberOfPages() + 1, "</a></li><li id=\"pageNo--").concat(nextPage, "\" class=\"page-item\"><a class=\"page-link\">Next</a></li>");
          }
        } else {
          return "";
        }
      };

      this.pagination.push(buttons());
      this.addContent({
        id: pageList,
        array: this.pagination
      });
      Array.from(pageList.children).map(function (a) {
        return a.addEventListener("click", function () {
          _this2.navigateTo(a.id.split("--")[1]);
        });
      });
    }
  }, {
    key: "getNumberOfPages",
    value: function getNumberOfPages() {
      var no = this.chunkArray(this.mapped, 20).length;
      return no;
    }
  }, {
    key: "getActivePage",
    value: function getActivePage() {
      return parseInt(this.activePage);
    }
  }, {
    key: "addContent",
    value: function addContent(_ref) {
      var id = _ref.id,
          array = _ref.array;
      var a = this.prepareArrayForPrinting(array);
      id.insertAdjacentHTML("beforeend", a);
    }
  }, {
    key: "prepareArrayForPrinting",
    value: function prepareArrayForPrinting(a) {
      return a.join("");
    }
  }, {
    key: "chunkArray",
    value: function chunkArray(array, chunk_size) {
      var results = [];
      var myArray = this.cloneArray(array);

      while (myArray.length) {
        results.push(myArray.splice(0, chunk_size));
      }

      return results;
    }
  }, {
    key: "prepareData",
    value: function prepareData(data) {
      var _this3 = this;

      return data.map(function (a, index) {
        return _this3.mapData(a, index);
      });
    }
  }, {
    key: "mapData",
    value: function mapData(data, index) {
      return "<div class=\"card my-2\">\n       <div class=\"card-header\" id=\"heading".concat(index, "\" data-toggle=\"collapse\" data-target=\"#collapse").concat(index, "\" aria-expanded=\"false\" aria-controls=\"collapse").concat(index, "\">\n         <p class=\"mb-0 dropdownTitle\">\n               ").concat(data.title, "\n         </p>\n         <div class=\"d-none row align-items-center justify-content-between d-sm-flex\">\n         <h6 class=\"category mb-0 px-4\">").concat(data.category, "</h6>\n         <h6 class=\"mb-0 px-4\"><i class=\"far fa-clock\"></i><span style=\"font-weight:bold;\" class=\"px-2\">").concat(data.completeTime, "</span></h6>\n         <h6 class=\"mb-0 px-4\"><i class=\"fas fa-hashtag\"></i><span style=\"font-weight:bold;\" class=\"px-2\">").concat(data.questions, "</span></h6>\n         </div>\n       </div>\n       <div id=\"collapse").concat(index, "\" class=\"collapse\" aria-labelledby=\"heading").concat(index, "\" data-parent=\"#accordionExample\">\n         <div class=\"card-body\">\n            <div class=\"d-flex row align-items-center justify-content-between p-2\">\n              <p class=\"mb-0 px-2\"><b>Time to Complete: </b><span class=\"px-2\">").concat(data.completeTime, "</span></p>\n              <p class=\"mb-0 px-2\"><b>Number of Questions: </b><span class=\"px-2\">").concat(data.questions, "</span></p>\n              <p class=\"mb-0 px-2\"><b>Language: </b> <span class=\"px-2\">").concat(this.dataUs(data.us), " </span></p>\n            </div> \n            <p class=\"description\"><b>Description: </b><br />").concat(data.description, "</p>\n            </div>\n         </div>\n       </div>\n   ");
    }
  }, {
    key: "dataUs",
    value: function dataUs(bool) {
      return bool ? 'English (US)' : 'English (UK)';
    }
  }, {
    key: "isMultiPage",
    value: function isMultiPage(array) {
      array.length <= 20;
    }
  }, {
    key: "addToTestBox",
    value: function addToTestBox(page) {
      testsbox.insertAdjacentHTML("beforeend", page);
    }
  }, {
    key: "togglePageList",
    value: function togglePageList(list) {
      var _this4 = this;

      list.map(function (a) {
        return a.classList.remove("activePage");
      });
      var active = list.filter(function (a) {
        return a.id === "pageNo--".concat(_this4.activePage);
      })[0];
      active.classList.add("activePage");
    }
  }, {
    key: "navigateTo",
    value: function navigateTo(index) {
      if (index != this.activePage) {
        this.activePage = index;
        this.togglePageList(this.listObjects());
        controls.scrollIntoView();
        this.paginationUpdate(this.chunkArray(this.mapped, 20));
        testsbox.innerHTML = this.prepareArrayForPrinting(this.chunkArray(this.mapped, 20)[this.activePage]);
      }
    }
  }, {
    key: "listObjects",
    value: function listObjects() {
      return Array.from(pageList.children);
    }
  }, {
    key: "selectorSetup",
    value: function selectorSetup() {
      var _this5 = this;

      var categories_all = this.initialData.map(function (a) {
        return a.category;
      });

      var categories = _toConsumableArray(new Set(categories_all));

      var selectObjects = categories.map(function (a) {
        return "<option value=\"".concat(a, "\">").concat(a, "</option>");
      });
      selectObjects.forEach(function (a) {
        return category.insertAdjacentHTML("beforeend", a);
      });
      category.addEventListener("change", function (e) {
        var newList = _this5.categoryFilter(category.value);

        if (newList.length > 0) {
          _this5.updateList(newList);
        } else {
          _this5.emptyList();
        }
      });
    }
  }, {
    key: "updateList",
    value: function updateList(data) {
      this.resetPagination();
      this.resetResults();
      this.activePage = 0;
      this.data = data;
      this.mapped = this.prepareData(data);
      this.pageSetup(this.mapped);
    }
  }, {
    key: "emptyList",
    value: function emptyList() {
      this.resetPagination();
      this.resetResults();
      this.activePage = 0;
      console.log('no values');
      this.addToTestBox('<div class="my-4"><h4 class="text-center">No tests found</h4></div>');
    }
  }, {
    key: "resetPagination",
    value: function resetPagination() {
      pageList.innerHTML = "";
      this.pagination = [];
    }
  }, {
    key: "resetResults",
    value: function resetResults() {
      testsbox.innerHTML = "";
    }
  }, {
    key: "categoryFilter",
    value: function categoryFilter(value) {
      if (search.value === '') {
        if (value === "all") {
          return this.initialData;
        } else {
          return this.initialData.filter(function (a) {
            return a.category === category.value;
          });
        }
      } else {
        if (value === "all") {
          var searchResults = this.search(this.initialData, search.value);
          return searchResults;
        } else {
          var categorydata = this.initialData.filter(function (a) {
            return a.category === category.value;
          });

          var _searchResults = this.search(categorydata, search.value);

          return _searchResults;
        }
      }
    }
  }, {
    key: "searchSetup",
    value: function searchSetup() {
      var _this6 = this;

      searchbtn.addEventListener("click", function () {
        var value = search.value;

        if (value != '') {
          var searchValues = _this6.search(_this6.data, value);

          if (searchValues.length > 0) {
            _this6.updateList(searchValues);
          } else {
            _this6.emptyList();
          }
        } else {
          var newList = _this6.categoryFilter(category.value);

          _this6.updateList(newList);
        }
      });
      search.addEventListener('keypress', function (e) {
        if (e.key === 'Enter') {
          var value = search.value;

          if (value != '') {
            var searchValues = _this6.search(_this6.data, value);

            if (searchValues.length > 0) {
              _this6.updateList(searchValues);
            } else {
              _this6.emptyList();
            }
          } else {
            var newList = _this6.categoryFilter(category.value);

            _this6.updateList(newList);
          }
        }
      });
    }
  }, {
    key: "search",
    value: function search(data, searchValue) {
      var options = {
        keys: ["title"]
      };
      var fuse = new Fuse(data, options);
      return fuse.search(searchValue);
    }
  }, {
    key: "cloneArray",
    value: function cloneArray(array) {
      return array.slice(0);
    }
  }]);

  return testsBox;
}();